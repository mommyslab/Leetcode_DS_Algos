class Solution {
public:
    //graph = [[4,3,1],[3,2,4],[3],[4],[]]

    void findPath(vector<vector<int>>& graph, vector<vector<int>>& res, vector<int> &path, int index, int & count )
        
    {   /*cout<<"graph ";
        printRes(graph);
        cout<<"count "<<count<<endl;
        cout<<"index "<<index<<endl;
        cout<<"path ";
        printPath(path);
        cout<<"res ";
        printRes(res);
        cout<<endl;*/
        
     if(index==graph.size()-1)
        {

          res.push_back(path);//[[0,4],]
          path.pop_back();
        }
        else{
            
            for(int i=0;i <graph[index].size();i++)
            {   
                
                path.push_back(graph[index][i]); //path=[], index=, count=1
                findPath(graph,res,path,graph[index][i],count); 
            }
            path.pop_back();
        }
    }
    void printPath(vector<int >& p)
    {
        cout<<"[";
        for(int i=0;i<p.size();i++)
        { cout<<p[i];
         if(i<p.size()-1)
             cout<<',';
         }
            cout<<"]"<<endl; 
    }
    void printRes(vector<vector<int>>&res)
    {
        
        cout<<"[";
        for(int i=0;i<res.size();i++)
        {
            cout<<"[";
            for(int j=0;j<res[i].size();j++)
            {
                cout<<res[i][j];
                if(j<res[i].size()-1)
                    cout<<",";
            }
    
            cout<<"]";
            if(i<res.size()-1)
                cout<<",";
        }cout<<"]"<<endl;
        
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>> res;// result 2d vector
        vector<int> path;
        path.push_back(0);
       
        int index=0;// vector index
        int count=0;// counts paths
        
        findPath(graph,res,path,index,count);//
        
        return res;
    }
};
