class Solution {
public:
    
    int countLives(vector<vector<int>>& board, int & i, int &j)
    {
        int count=0;
        vector<vector<int>> directions={{0,1},{1,0},{-1,0},{0,-1},{-1,-1},{1,1},                {-1,1},{1,-1}};
        for(int k=0;k<directions.size();k++)
        {
                int r=(i+directions[k][0]);
            cout<<i<<"input row"<<endl;
            cout<<r<<"row"<<endl;
                int c=j+directions[k][1];
            cout<<c<<"col"<<endl;
                if(r>=0 && r<board.size() && c>=0 && c<board[0].size() && (board[r][c]==1|| board[r][c]==2)) 
                    count++;
            cout<<count<<"count"<<endl;
            

        }
            
        return count;
    };
    
    void gameOfLife(vector<vector<int>>& board) {
        if(board.size()==0)
            return;
        for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                cout<<i<<" for loop i "<<j<<" for loop j"<<endl; 
                
                int count=countLives(board,i,j);
                if(board[i][j]==1 && (count<2 || count>3))
                   board[i][j]=2;
                if(board[i][j]==0 && count==3)
                    board[i][j]=3;
            }
        }
        cout<<"done counting"<<endl;
          for(int i=0;i<board.size();i++)
        {
            for(int j=0;j<board[0].size();j++)
            {
                if(board[i][j]==3)
                    board[i][j]=1;
                if(board[i][j]==2)
                    board[i][j]=0;
            }}
        
        
    }
};
